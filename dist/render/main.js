"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _assertThisInitialized2=_interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));var _inherits2=_interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _possibleConstructorReturn2=_interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2=_interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2["default"])(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2["default"])(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2["default"])(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else{result=Super.apply(this,arguments)}return(0,_possibleConstructorReturn2["default"])(this,result)}}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true}catch(e){return false}}var _require=require("electron"),ipcRenderer=_require.ipcRenderer;var React=require("react");var ReactDOM=require("react-dom");var linkifyHTML=require("linkifyjs/html");var Entry=require("./types/entry");var _require2=require("./constants"),MESSAGE_CLEAR_BACKEND=_require2.MESSAGE_CLEAR_BACKEND,MESSAGE_CONFIRM_REMOVE=_require2.MESSAGE_CONFIRM_REMOVE,CLIPBOARD_CLEAR=_require2.CLIPBOARD_CLEAR,CLIPBOARD_EVENT=_require2.CLIPBOARD_EVENT,CLIPBOARD_BULK_COPY=_require2.CLIPBOARD_BULK_COPY;function linkify(text,click){return linkifyHTML(text,{events:{click:click},defaultProtocol:"https",target:{url:"_blank"}})}/**
 *
 * @param {Object} param0
 * @param {Entry} param0.entry
 * @param {Function} param0.pin
 * @param {Function} param0.copy
 * @param {Function} param0.remove
 * @param {Function} param0.select
 */var ListEntry=function ListEntry(_ref){var entry=_ref.entry,pin=_ref.pin,copy=_ref.copy,remove=_ref.remove,select=_ref.select;return/*#__PURE__*/React.createElement("li",{"data-_id":entry._id,"data-selected":entry.selected,"data-pinned":entry.pinned,style:{position:"relative",listStyle:"none"},title:"Click to copy",onClickCapture:copy,onKeyDown:function onKeyDown(e){return e.code==="Enter"&&copy(e)},tabIndex:0,role:"menuitem"},entry.type==="image"?/*#__PURE__*/React.createElement("img",{src:entry.value,alt:"Copied from clipboard"}):linkify(entry.value,copy),/*#__PURE__*/React.createElement("div",{className:"entry-actions",role:"menubar"},/*#__PURE__*/React.createElement("button",{onClickCapture:remove,"aria-label":"Delete this entry",title:"Delete this entry"},/*#__PURE__*/React.createElement("img",{src:"./trash-outline.svg",alt:"delete icon"})),/*#__PURE__*/React.createElement("button",{onClickCapture:pin,"aria-label":"Pin this entry",title:"Pin this entry","data-active":entry.pinned},/*#__PURE__*/React.createElement("img",{src:"./bookmark-outline.svg",alt:"pin icon"})),/*#__PURE__*/React.createElement("button",{onClickCapture:copy,"aria-label":"Copy this entry",title:"Copy this entry"},/*#__PURE__*/React.createElement("img",{src:"./clipboard-outline.svg",alt:"copy icon"})),/*#__PURE__*/React.createElement("button",{onClickCapture:select,"aria-label":"Select this entry",title:"Select this entry","data-active":entry.selected},/*#__PURE__*/React.createElement("img",{src:"./checkmark-square-outline.svg",alt:"select icon"}))))};var App=/*#__PURE__*/function(_React$Component){(0,_inherits2["default"])(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;(0,_classCallCheck2["default"])(this,App);_this=_super.call(this,props);(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"handleKeyDown",function(_ref2){var code=_ref2.code,ctrlKey=_ref2.ctrlKey,shiftKey=_ref2.shiftKey;if(/Shift/gi.test(code)&&!_this.state.selecting)_this.setState(_objectSpread(_objectSpread({},_this.state),{},{selecting:true}));// Delete pressed
if(code==="Delete")if(ctrlKey){if(shiftKey)// Ctrl pressed
// Combination of CTRL + SHIFT + DELETE
_this.clearHistory();// Combination of CTRL + DELETE
else _this.clearClipboard();// Delete
}else if(_this.isSelecting())_this.deleteSelection();if(code==="KeyC"&&ctrlKey)if(_this.isSelecting())_this.copySelectionButtonRef.current.click()});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"handleKeyUp",function(_ref3){var code=_ref3.code;if(/Shift/gi.test(code)&&!_this.state.history.some(function(e){return e.selected}))_this.setState(_objectSpread(_objectSpread({},_this.state),{},{selecting:false}))});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"handleKeyUpClick",function(){if(_this.state.selecting)_this.setState(_objectSpread(_objectSpread({},_this.state),{},{history:_this.state.history.map(function(entry){return new Entry(_objectSpread(_objectSpread({},entry),{},{selected:false}))}),selecting:false}))});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"handleClipboardEvent",function(ev,entry){var history=_this.state.history;// if you really want a performance boost out of this you could
// switch `history` to an object instead, O(1) search by id
if(!history.some(function(e){return e.compareTo(entry)}))_this.setState(_objectSpread(_objectSpread({},_this.state),{},{history:[].concat((0,_toConsumableArray2["default"])(history),[new Entry(entry)])// Convert serialized entry object into Entry again
}))});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"clearHistory",/*#__PURE__*/(0,_asyncToGenerator2["default"])(/*#__PURE__*/_regenerator["default"].mark(function _callee(){return _regenerator["default"].wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!confirm(MESSAGE_CLEAR_BACKEND)){_context.next=3;break}_context.next=3;return _this.clearClipboard();case 3:_this.setState(_objectSpread(_objectSpread({},_this.state),{},{history:_this.state.history.filter(function(e){return e.pinned})}));case 4:case"end":return _context.stop();}}},_callee)})));(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"clearClipboard",function(){return ipcRenderer.invoke(CLIPBOARD_CLEAR).then(function(){alert("Cleared your clipboard!")})});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"remove",function(ev){var _id=ev.currentTarget.parentNode.parentNode.dataset._id;// The pinging on the backend will always signal to display what's currently stored on the clipboard.
// Leaving the user confused is not part of the deal.
if(confirm(MESSAGE_CONFIRM_REMOVE)){console.log("confirmed");_this.setState(_objectSpread(_objectSpread({},_this.state),{},{history:_this.state.history.filter(function(entry){return entry._id!==_id})}))}});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"copy",function(ev){var target=ev.target,currentTarget=ev.currentTarget;// Make sure to not copy links and leave their handling to the backend
if(target.tagName.toLowerCase()!=="a"){ev.preventDefault();var _id=_this.getEntryListItem(currentTarget).dataset._id;var index=_this.state.history.findIndex(function(e){return e._id===_id});if(!_this.isSelecting())ipcRenderer.send(CLIPBOARD_EVENT,_this.state.history[index]);else{var history=Array.from(_this.state.history);if(history[index].type!=="text")alert("Fatal: Can only bulk copy text entries");else{history[index].selected=!history[index].selected;_this.setState(_objectSpread(_objectSpread({},_this.state),{},{history:history}))}}ev.stopPropagation()}});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"getEntryListItem",function(el){var parent=el;while(parent.tagName!=="LI"){parent=parent.parentNode}return parent});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"pin",function(ev){var _id=_this.getEntryListItem(ev.currentTarget).dataset._id;var indexOfEntry=_this.state.history.findIndex(function(e){return e._id===_id});var history=Array.from(_this.state.history);history[indexOfEntry].pinned=!history[indexOfEntry].pinned;_this.setState(_objectSpread(_objectSpread({},_this.history),{},{history:history}))});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"copySelection",function(){var merged=_this.state.history.filter(function(e){return e.selected}).join("\r\n");ipcRenderer.send(CLIPBOARD_BULK_COPY,merged)});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"deleteSelection",function(ev){if(ev)ev.preventDefault();var _this$state$history$f=_this.state.history.filter(function(e){return e.selected}),length=_this$state$history$f.length;_this.setState(_objectSpread(_objectSpread({},_this.state),{},{history:_this.state.history.filter(function(e){return!e.selected})}),function(){alert("Deleted ".concat(length," entries."))})});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"isSelecting",function(){return _this.isSelectingShift()||_this.isAnyEntrySelected()});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"isSelectingShift",function(){return _this.state.selecting});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"isAnyEntrySelected",function(){return _this.state.history.some(function(e){return e.selected})});(0,_defineProperty2["default"])((0,_assertThisInitialized2["default"])(_this),"select",function(ev){var _id=ev.currentTarget.parentNode.parentNode.dataset._id;var index=_this.state.history.findIndex(function(e){return e._id===_id});var history=Array.from(_this.state.history);history[index].selected=!history[index].selected;_this.setState(_objectSpread(_objectSpread({},_this.state),{},{selecting:true,history:history}),function(){return console.log(_this.state.history[0].selected)})});_this.state={/** @type {import('../types/entry')[]} */history:[],selectingToggle:false,selecting:false};_this.copySelectionButtonRef=React.createRef();return _this}/**
   * @param {KeyboardEvent} param0
   */(0,_createClass2["default"])(App,[{key:"componentDidMount",value:function componentDidMount(){document.addEventListener("click",this.handleKeyUpClick);document.addEventListener("keyup",this.handleKeyUp);document.addEventListener("keydown",this.handleKeyDown);ipcRenderer.on(CLIPBOARD_EVENT,this.handleClipboardEvent)}},{key:"render",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement("div",{style:{display:"flex"}},/*#__PURE__*/React.createElement("button",{onClick:this.clearHistory},"Clear log"),/*#__PURE__*/React.createElement("button",{onClick:this.clearClipboard},"Clear clipboard only"),/*#__PURE__*/React.createElement("button",{onClick:this.copySelection,disabled:!this.isAnyEntrySelected()},"Copy selection"),/*#__PURE__*/React.createElement("button",{onClick:this.deleteSelection,disabled:!this.isAnyEntrySelected()},"Delete selection")),/*#__PURE__*/React.createElement("div",{style:{margin:"8px 0"}},this.state.history.length===0&&"Free as the wind~",this.state.history.length===1&&"There is 1 entry in the clipboard.",this.state.history.length>1&&"There are ".concat(this.state.history.length," entries in the clipboard.")),/*#__PURE__*/React.createElement("ul",{"data-selecting":this.state.selecting,role:"menu"},Array.from(this.state.history).filter(function(e){return e.pinned}).reverse().map(function(entry){return/*#__PURE__*/React.createElement(ListEntry,{key:entry._id,entry:entry,pin:_this2.pin,copy:_this2.copy,remove:_this2.remove,select:_this2.select})}),Array.from(this.state.history).filter(function(e){return!e.pinned}).reverse().map(function(entry){return/*#__PURE__*/React.createElement(ListEntry,{key:entry._id,entry:entry,pin:_this2.pin,copy:_this2.copy,remove:_this2.remove,select:_this2.select})})))}}]);return App}(React.Component);var container=document.querySelector("#container");ReactDOM.render(/*#__PURE__*/React.createElement(App,null),container);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,